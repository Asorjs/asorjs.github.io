"use strict";Object.defineProperty(exports, "__esModule", {value: true});





var _chunkXZOTAJAXcjs = require('./chunk-XZOTAJAX.cjs');

// src/index.ts








var _common = require('@vue-macros/common');


var _unplugin = require('unplugin');
function resolveOptions(options, framework) {
  const version = options.version || _common.detectVueVersion.call(void 0, );
  const include = _common.getFilterPattern.call(void 0, 
    [_common.FilterFileType.SRC_FILE, _common.FilterFileType.VUE_SFC_WITH_SETUP],
    framework
  );
  return {
    include,
    exclude: [_common.REGEX_NODE_MODULES],
    ...options,
    version
  };
}
var name = "unplugin-vue-reactivity-transform";
var plugin = _unplugin.createUnplugin.call(void 0, 
  (userOptions = {}, { framework }) => {
    const options = resolveOptions(userOptions, framework);
    const filter = _common.createFilter.call(void 0, options);
    const filterSFC = _common.createRollupFilter.call(void 0, 
      _common.getFilterPattern.call(void 0, 
        [_common.FilterFileType.VUE_SFC_WITH_SETUP, _common.FilterFileType.SETUP_SFC],
        framework
      )
    );
    return {
      name,
      enforce: "pre",
      resolveId(id) {
        if (id === _common.normalizePath.call(void 0, _chunkXZOTAJAXcjs.helperId)) return id;
      },
      loadInclude(id) {
        return _common.normalizePath.call(void 0, id) === _chunkXZOTAJAXcjs.helperId;
      },
      load(id) {
        if (_common.normalizePath.call(void 0, id) === _chunkXZOTAJAXcjs.helperId) return _chunkXZOTAJAXcjs.code_default;
      },
      transformInclude: filter,
      transform(code, id) {
        if (filterSFC(id)) {
          return _chunkXZOTAJAXcjs.transformVueSFC.call(void 0, code, id);
        } else if (_chunkXZOTAJAXcjs.shouldTransform.call(void 0, code)) {
          return _chunkXZOTAJAXcjs.transform.call(void 0, code, {
            filename: id,
            sourceMap: true
          });
        }
      }
    };
  }
);
var src_default = plugin;



exports.src_default = src_default;
