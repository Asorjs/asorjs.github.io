// src/core/index.ts
import {
  DEFINE_PROPS,
  DEFINE_PROPS_REFS,
  generateTransform,
  HELPER_PREFIX,
  importHelperFn,
  isCallOf,
  MagicStringAST,
  parseSFC,
  removeMacroImport,
  walkAST,
  WITH_DEFAULTS
} from "@vue-macros/common";
function transformDefinePropsRefs(code, id) {
  if (!code.includes(DEFINE_PROPS_REFS)) return;
  const { scriptSetup, getSetupAst } = parseSFC(code, id);
  if (!scriptSetup) return;
  const offset = scriptSetup.loc.start.offset;
  const s = new MagicStringAST(code);
  const setupAst = getSetupAst();
  walkAST(setupAst, {
    enter(node) {
      removeMacroImport(node, s, offset);
      if (isCallOf(node, WITH_DEFAULTS) && isCallOf(node.arguments[0], DEFINE_PROPS_REFS)) {
        processDefinePropsRefs(node.arguments[0], node);
        this.skip();
      } else if (isCallOf(node, DEFINE_PROPS_REFS)) {
        processDefinePropsRefs(node);
      }
    }
  });
  return generateTransform(s, id);
  function processDefinePropsRefs(propsCall, defaultsCall) {
    let code2 = `${DEFINE_PROPS}${s.slice(
      offset + propsCall.callee.end,
      offset + propsCall.end
    )}`;
    if (defaultsCall) {
      code2 = `${WITH_DEFAULTS}(${code2}, ${s.sliceNode(
        defaultsCall.arguments[1],
        { offset }
      )})`;
    }
    s.prependLeft(offset, `
const ${HELPER_PREFIX}props = ${code2}`);
    s.overwriteNode(
      defaultsCall || propsCall,
      `${importHelperFn(s, offset, "toRefs")}(${HELPER_PREFIX}props)`,
      {
        offset
      }
    );
  }
}

export {
  transformDefinePropsRefs
};
