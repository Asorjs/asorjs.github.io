import { MagicStringAST, CodeTransform } from '@vue-macros/common';
import { ElementNode, NodeTransform, RootNode } from '@vue/compiler-dom';
import { T as TemplateContent, C as CustomBlocks } from './index.d-Ccebqmdc.js';
export { M as MAIN_TEMPLATE, Q as QUERY_NAMED_TEMPLATE, a as QUERY_TEMPLATE, b as QUERY_TEMPLATE_MAIN } from './index.d-Ccebqmdc.js';
import { Program } from '@babel/types';
import 'unplugin';

declare function getChildrenLocation(node: ElementNode): [number, number] | undefined;
interface VueQuery {
    vue?: boolean;
    src?: string;
    type?: 'script' | 'template' | 'style' | 'custom';
    index?: number;
    lang?: string;
    raw?: boolean;
    url?: boolean;
    scoped?: boolean;
}
/**
 * Copy from https://github.com/vitejs/vite-plugin-vue/blob/797e424e46600c93fa76a4ef8befc08ef6b5abdb/packages/plugin-vue/src/utils/query.ts#L12
 */
declare function parseVueRequest(id: string): {
    filename: string;
    query: VueQuery;
};

declare function transformTemplateIs(s: MagicStringAST): NodeTransform;
declare function preTransform(code: string, id: string, templateContent: TemplateContent): CodeTransform | undefined;
declare function preTransformMainTemplate({ s, root, node, id, templateContent, }: {
    s: MagicStringAST;
    root: RootNode;
    node: ElementNode;
    id: string;
    templateContent: TemplateContent;
}): void;
declare function postTransform(code: string, id: string, customBlocks: CustomBlocks): CodeTransform | undefined;
declare function postTransformMainEntry(program: Program, id: string, customBlocks: CustomBlocks): void;

export { type VueQuery, getChildrenLocation, parseVueRequest, postTransform, postTransformMainEntry, preTransform, preTransformMainTemplate, transformTemplateIs };
