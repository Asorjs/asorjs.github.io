"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }



var _chunkNVHOL5KOcjs = require('./chunk-NVHOL5KO.cjs');

// src/index.ts
var _nodeprocess = require('node:process'); var _nodeprocess2 = _interopRequireDefault(_nodeprocess);
var _api = require('@vue-macros/api');






var _common = require('@vue-macros/common');


var _unplugin = require('unplugin');
function resolveOptions(options, framework) {
  const version = options.version || _common.detectVueVersion.call(void 0, );
  const include = _common.getFilterPattern.call(void 0, 
    [_common.FilterFileType.VUE_SFC_WITH_SETUP, _common.FilterFileType.SETUP_SFC],
    framework
  );
  return {
    include,
    isProduction: _nodeprocess2.default.env.NODE_ENV === "production",
    edition: "kevinEdition",
    ...options,
    version
  };
}
var name = "unplugin-vue-define-prop";
var plugin = _unplugin.createUnplugin.call(void 0, 
  (userOptions = {}, { framework }) => {
    const options = resolveOptions(userOptions, framework);
    const filter = _common.createFilter.call(void 0, options);
    const { resolve, handleHotUpdate } = _api.RollupResolve.call(void 0, );
    return {
      name,
      enforce: "pre",
      buildStart() {
        if (framework === "rollup" || framework === "vite") {
          _api.setResolveTSFileIdImpl.call(void 0, resolve(this));
        }
      },
      resolveId(id) {
        if (id === _common.normalizePath.call(void 0, _chunkNVHOL5KOcjs.helperId)) return id;
      },
      loadInclude(id) {
        return _common.normalizePath.call(void 0, id) === _chunkNVHOL5KOcjs.helperId;
      },
      load(id) {
        if (_common.normalizePath.call(void 0, id) === _chunkNVHOL5KOcjs.helperId) return _chunkNVHOL5KOcjs.code_default;
      },
      transformInclude: filter,
      transform(code, id) {
        return _chunkNVHOL5KOcjs.transformDefineProp.call(void 0, 
          code,
          id,
          options.edition,
          options.isProduction
        );
      },
      vite: {
        configResolved(config) {
          options.isProduction ??= config.isProduction;
        },
        handleHotUpdate
      }
    };
  }
);
var src_default = plugin;



exports.src_default = src_default;
