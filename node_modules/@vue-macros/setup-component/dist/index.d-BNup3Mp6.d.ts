import { CodeTransform, AttachedScope } from '@vue-macros/common';
import { Node } from '@babel/types';
import { HmrContext, ModuleNode } from 'vite';

interface FileContextComponent {
    code: string;
    body: string;
    node: Node;
    scopes: string[];
}
interface FileContext {
    components: FileContextComponent[];
    imports: string[];
}
type SetupComponentContext = Record<string, FileContext>;
declare function scanSetupComponent(code: string, id: string): FileContext | undefined;
declare function transformSetupComponent(code: string, _id: string, ctx: SetupComponentContext): CodeTransform | undefined;
declare function loadSetupComponent(virtualId: string, ctx: SetupComponentContext, root: string): string | undefined;
declare function hotUpdateSetupComponent({ file, modules, read }: HmrContext, ctx: SetupComponentContext): Promise<ModuleNode[] | undefined>;
declare function transformPost(code: string, _id: string): CodeTransform | undefined;
declare function getScopeDecls(scope: AttachedScope | undefined): string[];

export { type SetupComponentContext as S, transformPost as a, getScopeDecls as g, hotUpdateSetupComponent as h, loadSetupComponent as l, scanSetupComponent as s, transformSetupComponent as t };
